Parameters:
  EEAPIBase:
    Description: "Event Engine API Base URL (https://hostname:port/api)"
    Type: String
  EEAPIToken:
    Description: "API Token to use for authentication"
    Type: String
  EEEventId:
    Description: "ID of the specific Event"
    Type: String
  EEModuleId:
    Description: "Unique ID of this module"
    Type: String
  EELifecycleTopicArn:
    Description: "ARN of the Event Engine module lifecycle SNS topic"
    Type: String
  EEAssetsBucket:
    Description: "Artifacts Bucket"
    Type: String
  EEModuleVersion:
    Description: "Version of the module"
    Type: String
  EEAssetsKeyPrefix:
    Description: "S3 prefix where assets are stored. Includes the ModuleID and version. eg modules/my_module/v1/"
    Type: String
  LambdaKey:
    Default: "modules/2f0cd812fad94f7c9a284f6fe7d2e96f/v1/lambda.zip"
    Description: S3 Key for lambda responses zip
    Type: String
Resources:
  SnsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: sns_lambda.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: '30'
      Code:
        S3Bucket: !Ref EEAssetsBucket
        S3Key: !Ref LambdaKey
      Environment:
        Variables:
          EE_API_TOKEN: !Ref EEAPIToken
          MODULE_NAME: !Ref EEModuleId
          EE_EVENT_ID: !Ref EEEventId
          EE_API_BASE: !Ref EEAPIBase
          EVENT_REGION: !Ref AWS::Region
          DYNAMO_TABLE_ARN: !GetAtt MyDynamoDBTable.Arn
          INIT_LAMBDA: !Ref InitLambda
  InitLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: init_lambda.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: '30'
      Code:
        S3Bucket: !Ref EEAssetsBucket
        S3Key: !Ref LambdaKey
      Environment:
        Variables:
          EE_API_TOKEN: !Ref EEAPIToken
          MODULE_NAME: !Ref EEModuleId
          EE_EVENT_ID: !Ref EEEventId
          EE_API_BASE: !Ref EEAPIBase
          EVENT_REGION: !Ref AWS::Region
          DYNAMO_TABLE_ARN: !GetAtt MyDynamoDBTable.Arn
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      -
        PolicyName: LambdaPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: "*"
            # need to scope this down eventually
          - Effect: Allow
            Action: "*"
            Resource: "*"
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:  !Ref EELifecycleTopicArn
      FunctionName: !Ref SnsLambda
  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 50
        ReadCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: id
  SnsLambdaSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt SnsLambda.Arn
      Protocol: lambda
      TopicArn: !Ref EELifecycleTopicArn